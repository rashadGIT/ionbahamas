{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar PUNCTUATION_LIST = [\".\", \",\", \"!\", \"?\", \"'\", \"{\", \"}\", \"(\", \")\", \"[\", \"]\", \"/\"];\n\nvar trimText = function trimText(text) {\n  var min = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 80;\n  var ideal = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 100;\n  var max = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 200; //This main function uses two pointers to move out from the ideal, to find the first instance of a punctuation mark followed by a space. If one cannot be found, it will go with the first space closest to the ideal.\n\n  if (max < min || ideal > max || ideal < min) {\n    throw new Error(\"The minimum length must be less than the maximum, and the ideal must be between the minimum and maximum.\");\n  }\n\n  if (text.length < ideal) {\n    return [text, ''];\n  }\n\n  var pointerOne = ideal;\n  var pointerTwo = ideal;\n  var firstSpace = void 0,\n      resultIdx = void 0;\n\n  var setSpace = function setSpace(idx) {\n    if (spaceMatch(text[idx])) {\n      firstSpace = firstSpace || idx;\n    }\n  };\n\n  while (pointerOne < max || pointerTwo > min) {\n    if (checkMatch(pointerOne, text, max, min)) {\n      resultIdx = pointerOne + 1;\n      break;\n    } else if (checkMatch(pointerTwo, text, max, min)) {\n      resultIdx = pointerTwo + 1;\n      break;\n    } else {\n      setSpace(pointerOne);\n      setSpace(pointerTwo);\n    }\n\n    pointerOne++;\n    pointerTwo--;\n  }\n\n  if (resultIdx === undefined) {\n    if (firstSpace && firstSpace >= min && firstSpace <= max) {\n      resultIdx = firstSpace;\n    } else if (ideal - min < max - ideal) {\n      resultIdx = min;\n    } else {\n      resultIdx = max;\n    }\n  }\n\n  return [text.slice(0, resultIdx), text.slice(resultIdx).trim()];\n};\n\nvar spaceMatch = function spaceMatch(character) {\n  if (character === \" \") {\n    return true;\n  }\n};\n\nvar punctuationMatch = function punctuationMatch(idx, text) {\n  var punctuationIdx = PUNCTUATION_LIST.indexOf(text[idx]);\n\n  if (punctuationIdx >= 0 && spaceMatch(text[idx + 1])) {\n    return true;\n  }\n};\n\nvar checkMatch = function checkMatch(idx, text, max, min) {\n  if (idx < max && idx > min && punctuationMatch(idx, text)) {\n    return true;\n  }\n};\n\nexports.default = trimText;","map":null,"metadata":{},"sourceType":"script"}