{"ast":null,"code":"/**\r\n * HashMap - HashMap Class for JavaScript\r\n * @author Ariel Flesler <aflesler@gmail.com>\r\n * @version 2.0.6\r\n * Homepage: https://github.com/flesler/hashmap\r\n */\n(function (factory) {\n  /* global define */\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define([], factory);\n  } else if (typeof module === 'object') {\n    // Node js environment\n    var HashMap = module.exports = factory(); // Keep it backwards compatible\n\n    HashMap.HashMap = HashMap;\n  } else {\n    // Browser globals (this is window)\n    this.HashMap = factory();\n  }\n})(function () {\n  function HashMap(other) {\n    this.clear();\n\n    switch (arguments.length) {\n      case 0:\n        break;\n\n      case 1:\n        {\n          if ('length' in other) {\n            // Flatten 2D array to alternating key-value array\n            _multi(this, Array.prototype.concat.apply([], other));\n          } else {\n            // Assumed to be a HashMap instance\n            this.copy(other);\n          }\n\n          break;\n        }\n\n      default:\n        _multi(this, arguments);\n\n        break;\n    }\n  }\n\n  var proto = HashMap.prototype = {\n    constructor: HashMap,\n    get: function get(key) {\n      var data = this._data[this.hash(key)];\n\n      return data && data[1];\n    },\n    set: function set(key, value) {\n      // Store original key as well (for iteration)\n      var hash = this.hash(key);\n\n      if (!(hash in this._data)) {\n        this.size++;\n      }\n\n      this._data[hash] = [key, value];\n    },\n    multi: function multi() {\n      _multi(this, arguments);\n    },\n    copy: function copy(other) {\n      for (var hash in other._data) {\n        if (!(hash in this._data)) {\n          this.size++;\n        }\n\n        this._data[hash] = other._data[hash];\n      }\n    },\n    has: function has(key) {\n      return this.hash(key) in this._data;\n    },\n    search: function search(value) {\n      for (var key in this._data) {\n        if (this._data[key][1] === value) {\n          return this._data[key][0];\n        }\n      }\n\n      return null;\n    },\n    delete: function _delete(key) {\n      var hash = this.hash(key);\n\n      if (hash in this._data) {\n        this.size--;\n        delete this._data[hash];\n      }\n    },\n    type: function type(key) {\n      var str = Object.prototype.toString.call(key);\n      var type = str.slice(8, -1).toLowerCase(); // Some browsers yield DOMWindow or Window for null and undefined, works fine on Node\n\n      if (!key && (type === 'domwindow' || type === 'window')) {\n        return key + '';\n      }\n\n      return type;\n    },\n    keys: function keys() {\n      var keys = [];\n      this.forEach(function (_, key) {\n        keys.push(key);\n      });\n      return keys;\n    },\n    values: function values() {\n      var values = [];\n      this.forEach(function (value) {\n        values.push(value);\n      });\n      return values;\n    },\n    entries: function entries() {\n      var entries = [];\n      this.forEach(function (value, key) {\n        entries.push([key, value]);\n      });\n      return entries;\n    },\n    // TODO: This is deprecated and will be deleted in a future version\n    count: function count() {\n      return this.size;\n    },\n    clear: function clear() {\n      // TODO: Would Object.create(null) make any difference\n      this._data = {};\n      this.size = 0;\n    },\n    clone: function clone() {\n      return new HashMap(this);\n    },\n    hash: function hash(key) {\n      switch (this.type(key)) {\n        case 'undefined':\n        case 'null':\n        case 'boolean':\n        case 'number':\n        case 'regexp':\n          return key + '';\n\n        case 'date':\n          return '♣' + key.getTime();\n\n        case 'string':\n          return '♠' + key;\n\n        case 'array':\n          var hashes = [];\n\n          for (var i = 0; i < key.length; i++) {\n            hashes[i] = this.hash(key[i]);\n          }\n\n          return '♥' + hashes.join('⁞');\n\n        default:\n          // TODO: Don't use expandos when Object.defineProperty is not available?\n          if (!key.hasOwnProperty('_hmuid_')) {\n            key._hmuid_ = ++HashMap.uid;\n            hide(key, '_hmuid_');\n          }\n\n          return '♦' + key._hmuid_;\n      }\n    },\n    forEach: function forEach(func, ctx) {\n      for (var key in this._data) {\n        var data = this._data[key];\n        func.call(ctx || this, data[1], data[0]);\n      }\n    }\n  };\n  HashMap.uid = 0; //- Add chaining to all methods that don't return something\n\n  ['set', 'multi', 'copy', 'delete', 'clear', 'forEach'].forEach(function (method) {\n    var fn = proto[method];\n\n    proto[method] = function () {\n      fn.apply(this, arguments);\n      return this;\n    };\n  }); //- Backwards compatibility\n  // TODO: remove() is deprecated and will be deleted in a future version\n\n  HashMap.prototype.remove = HashMap.prototype.delete; //- Utils\n\n  function _multi(map, args) {\n    for (var i = 0; i < args.length; i += 2) {\n      map.set(args[i], args[i + 1]);\n    }\n  }\n\n  function hide(obj, prop) {\n    // Make non iterable if supported\n    if (Object.defineProperty) {\n      Object.defineProperty(obj, prop, {\n        enumerable: false\n      });\n    }\n  }\n\n  return HashMap;\n});","map":null,"metadata":{},"sourceType":"script"}