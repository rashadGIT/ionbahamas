{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _calendarBase = require('calendar-base');\n\nvar _classnames = require('classnames');\n\nvar _classnames2 = _interopRequireDefault(_classnames);\n\nvar _CalendarDay = require('./components/CalendarDay');\n\nvar _CalendarDay2 = _interopRequireDefault(_CalendarDay);\n\nvar _CalendarEvent = require('./components/CalendarEvent');\n\nvar _CalendarEvent2 = _interopRequireDefault(_CalendarEvent);\n\nvar _CalendarTitle = require('./components/CalendarTitle');\n\nvar _CalendarTitle2 = _interopRequireDefault(_CalendarTitle);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar EventCalendar = function (_React$Component) {\n  _inherits(EventCalendar, _React$Component);\n\n  function EventCalendar(props) {\n    _classCallCheck(this, EventCalendar);\n\n    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(EventCalendar).call(this, props));\n\n    _this._eventTargets = {};\n    _this.state = {\n      today: _this.getToday()\n    };\n    _this.calendar = new _calendarBase.Calendar({\n      siblingMonths: true\n    }); // Bind methods\n\n    _this.getCalendarDays = _this.getCalendarDays.bind(_this);\n    _this.getDaysWithEvents = _this.getDaysWithEvents.bind(_this);\n    _this.getEventMeta = _this.getEventMeta.bind(_this);\n    _this.getToday = _this.getToday.bind(_this);\n    return _this;\n  }\n\n  _createClass(EventCalendar, [{\n    key: 'getToday',\n    value: function getToday() {\n      var today = new Date();\n      return {\n        day: today.getDate(),\n        month: today.getMonth(),\n        year: today.getFullYear()\n      };\n    }\n  }, {\n    key: 'getCalendarDays',\n    value: function getCalendarDays() {\n      var _this2 = this;\n\n      return this.calendar.getCalendar(this.props.year, this.props.month).map(function (day) {\n        day.eventSlots = Array(_this2.props.maxEventSlots).fill(false);\n        return day;\n      });\n    }\n  }, {\n    key: 'getEventMeta',\n    value: function getEventMeta(days, eventStart, eventEnd) {\n      var eventStartInView = this.calendar.isDateSelected(eventStart);\n      var eventEndInView = this.calendar.isDateSelected(eventEnd);\n      var firstDayOfMonth = days[0];\n      var lastDayOfMonth = days[days.length - 1];\n      var eventMeta = {\n        // Asserts Event is visible in this month view\n        isVisibleInView: false,\n        visibleEventLength: days.length,\n        // Returns the index (interval from first visible day) of [...days] of event's first \"visible\" day\n        firstVisibleDayIndex: eventStartInView ? _calendarBase.Calendar.interval(firstDayOfMonth, eventStart) - 1 : 0\n      }; // Asserts Event is visible in this month view\n\n      if (eventStartInView || eventEndInView) {\n        // Asserts event's first or last day is visible in this month view\n        eventMeta.isVisibleInView = true;\n      } else if (eventStart.month < this.props.month && eventEnd.month > this.props.month) {\n        // Asserts at least part of month is\n        eventMeta.isVisibleInView = true;\n      } // Determine the visible length of the event during the month\n\n\n      if (eventStartInView && eventEndInView) {\n        eventMeta.visibleEventLength = _calendarBase.Calendar.interval(eventStart, eventEnd);\n      } else if (!eventStartInView && eventEndInView) {\n        eventMeta.visibleEventLength = _calendarBase.Calendar.interval(firstDayOfMonth, eventEnd);\n      } else if (eventStartInView && !eventEndInView) {\n        eventMeta.visibleEventLength = _calendarBase.Calendar.interval(eventStart, lastDayOfMonth);\n      }\n\n      return eventMeta;\n    }\n  }, {\n    key: 'getDaysWithEvents',\n    value: function getDaysWithEvents() {\n      var _this3 = this; // Get all the days in this months calendar view\n      // Sibling Months included\n\n\n      var days = this.getCalendarDays(); // Set Range Limits on calendar\n\n      this.calendar.setStartDate(days[0]);\n      this.calendar.setEndDate(days[days.length - 1]); // Iterate over each of the supplied events\n\n      this.props.events.forEach(function (eventItem) {\n        var eventStart = _this3.getCalendarDayObject(eventItem.start);\n\n        var eventEnd = _this3.getCalendarDayObject(eventItem.end);\n\n        var eventMeta = _this3.getEventMeta(days, eventStart, eventEnd);\n\n        if (eventMeta.isVisibleInView) {\n          var eventLength = eventMeta.visibleEventLength;\n          var eventSlotIndex = days[eventMeta.firstVisibleDayIndex].eventSlots.indexOf(false);\n          var dayIndex = 0; // For each day in the event\n\n          while (dayIndex < eventLength) {\n            // Clone the event object so we acn add day specfic data\n            var eventData = Object.assign({}, eventItem);\n\n            if (dayIndex === 0) {\n              // Flag first day of event\n              eventData.isFirstDay = true;\n            }\n\n            if (dayIndex === eventLength - 1) {\n              // Flag last day of event\n              eventData.isLastDay = true;\n            }\n\n            if (!eventData.isFirstDay || !eventData.isLastDay) {\n              // Flag between day of event\n              eventData.isBetweenDay = true;\n            } // Apply Event Data to the correct slot for that day\n\n\n            days[eventMeta.firstVisibleDayIndex + dayIndex].eventSlots[eventSlotIndex] = eventData; // Move to next day of event\n\n            dayIndex++;\n          }\n        }\n      });\n      return days;\n    }\n  }, {\n    key: 'getCalendarDayObject',\n    value: function getCalendarDayObject(date) {\n      var dateArray = date.split('-');\n      return {\n        year: dateArray[0],\n        // Subtract 1 from month to allow for human declared months\n        month: dateArray[1] - 1,\n        day: dateArray[2]\n      };\n    }\n  }, {\n    key: 'getLastIndexOfEvent',\n    value: function getLastIndexOfEvent(slots) {\n      var lastIndexOfEvent = slots.map(function (slot, index) {\n        return slot !== false ? index : false;\n      }).filter(function (element) {\n        return element;\n      }).pop();\n      return lastIndexOfEvent < 3 || lastIndexOfEvent === undefined ? 2 : lastIndexOfEvent;\n    }\n  }, {\n    key: 'getSerializedDay',\n    value: function getSerializedDay(day) {\n      return [day.weekDay, day.day, day.month, day.year].join('');\n    }\n  }, {\n    key: 'renderDaysOfTheWeek',\n    value: function renderDaysOfTheWeek() {\n      return this.props.daysOfTheWeek.map(function (title, index) {\n        return _react2.default.createElement(_CalendarTitle2.default, {\n          key: 'title_' + index,\n          title: title\n        });\n      });\n    }\n  }, {\n    key: 'renderEvents',\n    value: function renderEvents(day) {\n      var _this4 = this; // Trim excess slots\n\n\n      var eventSlots = day.eventSlots.slice(0, this.getLastIndexOfEvent(day.eventSlots) + 1);\n      return eventSlots.map(function (eventData, index) {\n        return _react2.default.createElement(_CalendarEvent2.default, {\n          key: 'event_' + index + _this4.getSerializedDay(day),\n          day: day,\n          eventData: eventData,\n          onClick: _this4.props.onEventClick,\n          onMouseOut: _this4.props.onEventMouseOut,\n          onMouseOver: _this4.props.onEventMouseOver,\n          wrapTitle: _this4.props.wrapTitle\n        });\n      });\n    }\n  }, {\n    key: 'renderCalendarDays',\n    value: function renderCalendarDays() {\n      var _this5 = this;\n\n      return this.getDaysWithEvents().map(function (day, index) {\n        var isToday = _calendarBase.Calendar.interval(day, _this5.state.today) === 1;\n\n        var events = _this5.renderEvents(day);\n\n        return _react2.default.createElement(_CalendarDay2.default, {\n          key: 'day_' + _this5.getSerializedDay(day),\n          day: day,\n          events: events,\n          isToday: isToday,\n          onClick: _this5.props.onDayClick\n        });\n      });\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      return _react2.default.createElement('div', {\n        className: 'flexContainer'\n      }, this.renderDaysOfTheWeek(), this.renderCalendarDays());\n    }\n  }]);\n\n  return EventCalendar;\n}(_react2.default.Component);\n\nEventCalendar.propTypes = {\n  daysOfTheWeek: _react2.default.PropTypes.array,\n  events: _react2.default.PropTypes.array,\n  maxEventSlots: _react2.default.PropTypes.number,\n  month: _react2.default.PropTypes.number.isRequired,\n  onEventClick: _react2.default.PropTypes.func,\n  onEventMouseOut: _react2.default.PropTypes.func,\n  onEventMouseOver: _react2.default.PropTypes.func,\n  onDayClick: _react2.default.PropTypes.func,\n  wrapTitle: _react2.default.PropTypes.bool,\n  year: _react2.default.PropTypes.number.isRequired\n};\nEventCalendar.defaultProps = {\n  daysOfTheWeek: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n  events: [],\n  wrapTitle: true,\n  maxEventSlots: 10\n};\nexports.default = EventCalendar;","map":null,"metadata":{},"sourceType":"script"}