{"ast":null,"code":"/**\n * Calendar constructor\n *\n * @param   {Object}  options               Calendar options\n *   @param {Object}  options.startDate     Date object indicating the selected start date\n *   @param {Object}  options.endDate       Date object indicating the selected end date\n *   @param {Boolean} options.siblingMonths Calculate dates from sibling months (before and after the current month, based on weekStart)\n *   @param {Boolean} options.weekNumbers   Caclulate the week days\n *   @param {Number}  options.weekStart     Day of the week to start the calendar, respects `Date.prototype.getDay` (defaults to `0`, Sunday)\n */\nfunction Calendar(options) {\n  options = options || {};\n  this.startDate = options.startDate;\n  this.endDate = options.endDate;\n  this.siblingMonths = options.siblingMonths;\n  this.weekNumbers = options.weekNumbers;\n  this.weekStart = options.weekStart;\n\n  if (this.weekStart === undefined) {\n    this.weekStart = 0;\n  }\n\n  this.date = new Date(1986, 9, 14, 0, 0, 0);\n}\n/**\n * Calculate a calendar month\n *\n * @param  {Number} year  Year\n * @param  {Number} month Month [0-11]\n * @return {Array}        Calendar days\n */\n\n\nCalendar.prototype.getCalendar = function (year, month) {\n  this.date.setUTCFullYear(year);\n  this.date.setUTCMonth(month);\n  this.date.setUTCDate(1);\n  year = this.date.getUTCFullYear();\n  month = this.date.getUTCMonth();\n  var calendar = [],\n      firstDay = this.date.getUTCDay(),\n      firstDate = -((7 - this.weekStart + firstDay) % 7),\n      lastDate = Calendar.daysInMonth(year, month),\n      lastDay = (lastDate - firstDate) % 7,\n      lastDatePreviousMonth = Calendar.daysInMonth(year, month - 1),\n      i = firstDate,\n      max = lastDate - i + (lastDay != 0 ? 7 - lastDay : 0) + firstDate,\n      currentDay,\n      currentDate,\n      currentDateObject,\n      currentWeekNumber = null,\n      otherMonth,\n      otherYear;\n\n  while (i < max) {\n    currentDate = i + 1;\n    currentDay = ((i < 1 ? 7 + i : i) + firstDay) % 7;\n\n    if (currentDate < 1 || currentDate > lastDate) {\n      if (this.siblingMonths) {\n        if (currentDate < 1) {\n          otherMonth = month - 1;\n          otherYear = year;\n\n          if (otherMonth < 0) {\n            otherMonth = 11;\n            otherYear--;\n          }\n\n          currentDate = lastDatePreviousMonth + currentDate;\n        } else if (currentDate > lastDate) {\n          otherMonth = month + 1;\n          otherYear = year;\n\n          if (otherMonth > 11) {\n            otherMonth = 0;\n            otherYear++;\n          }\n\n          currentDate = i - lastDate + 1;\n        }\n\n        currentDateObject = {\n          day: currentDate,\n          weekDay: currentDay,\n          month: otherMonth,\n          year: otherYear,\n          siblingMonth: true\n        };\n      } else {\n        currentDateObject = false;\n      }\n    } else {\n      currentDateObject = {\n        day: currentDate,\n        weekDay: currentDay,\n        month: month,\n        year: year\n      };\n    }\n\n    if (currentDateObject && this.weekNumbers) {\n      if (currentWeekNumber === null) {\n        currentWeekNumber = Calendar.calculateWeekNumber(currentDateObject);\n      } else if (currentDay == 1 && currentWeekNumber == 52) {\n        currentWeekNumber = 1;\n      } else if (currentDay == 1) {\n        currentWeekNumber++;\n      }\n\n      currentDateObject.weekNumber = currentWeekNumber;\n    }\n\n    if (currentDateObject && this.startDate) {\n      currentDateObject.selected = this.isDateSelected(currentDateObject);\n    }\n\n    calendar.push(currentDateObject);\n    i++;\n  }\n\n  return calendar;\n};\n/**\n * Checks if a date is selected\n *\n * @param  {Object}  date Date object\n * @return {Boolean}      Selected status of the date\n */\n\n\nCalendar.prototype.isDateSelected = function (date) {\n  if (date.year == this.startDate.year && date.month == this.startDate.month && date.day == this.startDate.day) {\n    return true;\n  } else if (this.endDate) {\n    if (date.year == this.startDate.year && date.month == this.startDate.month && date.day < this.startDate.day) {\n      return false;\n    } else if (date.year == this.endDate.year && date.month == this.endDate.month && date.day > this.endDate.day) {\n      return false;\n    } else if (date.year == this.startDate.year && date.month < this.startDate.month) {\n      return false;\n    } else if (date.year == this.endDate.year && date.month > this.endDate.month) {\n      return false;\n    } else if (date.year < this.startDate.year) {\n      return false;\n    } else if (date.year > this.endDate.year) {\n      return false;\n    }\n\n    return true;\n  }\n\n  return false;\n};\n/**\n * Sets the selected period start\n *\n * @param {Object} date Date object\n */\n\n\nCalendar.prototype.setStartDate = function (date) {\n  this.startDate = date;\n};\n/**\n * Sets the selected period end\n *\n * @param {Object} date Date object\n */\n\n\nCalendar.prototype.setEndDate = function (date) {\n  this.endDate = date;\n};\n/**\n * Sets one selected date\n *\n * @param {Object} date Date object\n */\n\n\nCalendar.prototype.setDate = Calendar.prototype.setStartDate;\n/**\n * Calculates the difference between two dates (date1 - date2), in days\n *\n * @param  {Object} date1 Date object\n * @param  {Object} date2 Date object\n * @return {Number}       Days between the dates\n */\n\nCalendar.diff = function (date1, date2) {\n  var oDate1 = new Date(1986, 9, 14, 0, 0, 0),\n      oDate2 = new Date(1986, 9, 14, 0, 0, 0);\n  oDate1.setUTCFullYear(date1.year);\n  oDate1.setUTCMonth(date1.month);\n  oDate1.setUTCDate(date1.day);\n  oDate2.setUTCFullYear(date2.year);\n  oDate2.setUTCMonth(date2.month);\n  oDate2.setUTCDate(date2.day);\n  return Math.ceil((oDate1.getTime() - oDate2.getTime()) / 86400000);\n};\n/**\n * Calculates the interval between two dates\n *\n * @param  {Object} date1 Date object\n * @param  {Object} date2 Date object\n * @return {Number}       Number of days\n */\n\n\nCalendar.interval = function (date1, date2) {\n  return Math.abs(Calendar.diff(date1, date2)) + 1;\n};\n/**\n * Calculates the number of days in a month\n *\n * @param  {Number} year  Year\n * @param  {Number} month Month [0-11]\n * @return {Number}       Length of the month\n */\n\n\nCalendar.daysInMonth = function (year, month) {\n  return new Date(year, month + 1, 0).getDate();\n};\n/**\n * Calculates if a given year is a leap year\n *\n * @param  {Number}  year Year\n * @return {Boolean}      Leap year or not\n */\n\n\nCalendar.isLeapYear = function (year) {\n  return year % 4 == 0 && year % 100 != 0 || year % 400 == 0;\n};\n/**\n * Calculates the week number for a given date\n *\n * @param  {Object} date Date object\n * @return {Number}      Week number\n */\n// Adapted from http://techblog.procurios.nl/k/news/view/33796/14863/calculate-iso-8601-week-and-year-in-javascript.html\n\n\nCalendar.calculateWeekNumber = function (date) {\n  // Creates the requested date\n  var current = new Date(1986, 9, 14, 0, 0, 0);\n  current.setUTCFullYear(date.year);\n  current.setUTCMonth(date.month);\n  current.setUTCDate(date.day); // Create a copy of the object\n\n  var target = new Date(current.valueOf()); // ISO week date weeks start on monday so correct the day number\n\n  var dayNr = (current.getUTCDay() + 6) % 7; // ISO 8601 states that week 1 is the week with the first thursday of that\n  // year. Set the target date to the thursday in the target week.\n\n  target.setUTCDate(target.getUTCDate() - dayNr + 3); // Store the millisecond value of the target date\n\n  var firstThursday = target.valueOf(); // Set the target to the first thursday of the year\n  // First set the target to january first\n\n  target.setUTCMonth(0, 1); // Not a thursday? Correct the date to the next thursday\n\n  if (target.getUTCDay() != 4) {\n    target.setUTCMonth(0, 1 + (4 - target.getUTCDay() + 7) % 7);\n  } // The weeknumber is the number of weeks between the  first thursday of the\n  // year and the thursday in the target week.\n  // 604800000 = 7 * 24 * 3600 * 1000\n\n\n  return 1 + Math.ceil((firstThursday - target) / 604800000);\n};\n/**\n * Exports the Calendar\n */\n\n\nmodule.exports = {\n  Calendar: Calendar\n};","map":null,"metadata":{},"sourceType":"script"}