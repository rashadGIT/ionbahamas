{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _propTypes = require(\"prop-types\");\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _react = require(\"react\");\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reactDom = require(\"react-dom\");\n\nvar _classnames = require(\"classnames\");\n\nvar _classnames2 = _interopRequireDefault(_classnames);\n\nvar _dates = require(\"./utils/dates\");\n\nvar _dates2 = _interopRequireDefault(_dates);\n\nvar _eventLevels = require(\"./utils/eventLevels\");\n\nvar _helpers = require(\"./utils/helpers\");\n\nvar _propTypes3 = require(\"./utils/propTypes\");\n\nvar _selection = require(\"./utils/selection\");\n\nvar _Selection = require(\"./Selection\");\n\nvar _Selection2 = _interopRequireDefault(_Selection);\n\nvar _calendar = require(\"./calendar.scss\");\n\nvar _calendar2 = _interopRequireDefault(_calendar);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar BackgroundCells = function (_React$Component) {\n  _inherits(BackgroundCells, _React$Component);\n\n  function BackgroundCells(props, context) {\n    _classCallCheck(this, BackgroundCells);\n\n    var _this = _possibleConstructorReturn(this, (BackgroundCells.__proto__ || Object.getPrototypeOf(BackgroundCells)).call(this, props, context));\n\n    _this.state = {\n      selecting: false\n    };\n    return _this;\n  }\n\n  _createClass(BackgroundCells, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.props.selectable && this._selectable();\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this._teardownSelectable();\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      if (nextProps.selectable && !this.props.selectable) {\n        this._selectable();\n      }\n\n      if (!nextProps.selectable && this.props.selectable) {\n        this._teardownSelectable();\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _props = this.props,\n          range = _props.range,\n          Wrapper = _props.cellWrapperComponent,\n          dayPropGetter = _props.dayPropGetter,\n          currentDate = _props.date;\n      return _react2.default.createElement(\"div\", {\n        className: _calendar2.default.rbcRowBg\n      }, range.map(function (date, index) {\n        var _ref = dayPropGetter && dayPropGetter(date) || {},\n            className = _ref.className,\n            dayStyles = _ref.style;\n\n        var segmStyles = (0, _eventLevels.segStyle)(1, range.length);\n        var styles = Object.assign({}, dayStyles, segmStyles);\n        return _react2.default.createElement(Wrapper, {\n          key: index,\n          value: date,\n          range: range\n        }, _react2.default.createElement(\"div\", {\n          style: styles,\n          className: (0, _classnames2.default)(_calendar2.default.rbcDayBg, className, currentDate && _dates2.default.month(currentDate) !== _dates2.default.month(date) && _calendar2.default.rbcOffRangeBg)\n        }));\n      }));\n    }\n  }, {\n    key: \"_selectable\",\n    value: function _selectable() {\n      var _this2 = this;\n\n      var node = (0, _reactDom.findDOMNode)(this);\n      var selector = this._selector = new _Selection2.default(this.props.container, {\n        longPressThreshold: this.props.longPressThreshold\n      });\n\n      var selectorClicksHandler = function selectorClicksHandler(point, actionType) {\n        if (!(0, _Selection.isEvent)((0, _reactDom.findDOMNode)(_this2), point)) {\n          var rowBox = (0, _Selection.getBoundsForNode)(node);\n          var _props2 = _this2.props,\n              range = _props2.range,\n              rtl = _props2.rtl;\n\n          if ((0, _selection.pointInBox)(rowBox, point)) {\n            var width = (0, _selection.slotWidth)((0, _Selection.getBoundsForNode)(node), range.length);\n            var currentCell = (0, _selection.getCellAtX)(rowBox, point.x, width, rtl, range.length);\n\n            _this2._selectSlot({\n              startIdx: currentCell,\n              endIdx: currentCell,\n              action: actionType\n            });\n          }\n        }\n\n        _this2._initial = {};\n\n        _this2.setState({\n          selecting: false\n        });\n      };\n\n      selector.on(\"selecting\", function (box) {\n        var _props3 = _this2.props,\n            range = _props3.range,\n            rtl = _props3.rtl;\n        var startIdx = -1;\n        var endIdx = -1;\n\n        if (!_this2.state.selecting) {\n          (0, _helpers.notify)(_this2.props.onSelectStart, [box]);\n          _this2._initial = {\n            x: box.x,\n            y: box.y\n          };\n        }\n\n        if (selector.isSelected(node)) {\n          var nodeBox = (0, _Selection.getBoundsForNode)(node);\n\n          var _dateCellSelection = (0, _selection.dateCellSelection)(_this2._initial, nodeBox, box, range.length, rtl);\n\n          startIdx = _dateCellSelection.startIdx;\n          endIdx = _dateCellSelection.endIdx;\n        }\n\n        _this2.setState({\n          selecting: true,\n          startIdx: startIdx,\n          endIdx: endIdx\n        });\n      });\n      selector.on(\"beforeSelect\", function (box) {\n        if (_this2.props.selectable !== \"ignoreEvents\") {\n          return;\n        }\n\n        return !(0, _Selection.isEvent)((0, _reactDom.findDOMNode)(_this2), box);\n      });\n      selector.on(\"click\", function (point) {\n        return selectorClicksHandler(point, \"click\");\n      });\n      selector.on(\"doubleClick\", function (point) {\n        return selectorClicksHandler(point, \"doubleClick\");\n      });\n      selector.on(\"select\", function () {\n        _this2._selectSlot(_extends({}, _this2.state, {\n          action: \"select\"\n        }));\n\n        _this2._initial = {};\n\n        _this2.setState({\n          selecting: false\n        });\n\n        (0, _helpers.notify)(_this2.props.onSelectEnd, [_this2.state]);\n      });\n    }\n  }, {\n    key: \"_teardownSelectable\",\n    value: function _teardownSelectable() {\n      if (!this._selector) {\n        return;\n      }\n\n      this._selector.teardown();\n\n      this._selector = null;\n    }\n  }, {\n    key: \"_selectSlot\",\n    value: function _selectSlot(_ref2) {\n      var endIdx = _ref2.endIdx,\n          startIdx = _ref2.startIdx,\n          action = _ref2.action;\n\n      if (endIdx !== -1 && startIdx !== -1) {\n        this.props.onSelectSlot && this.props.onSelectSlot({\n          start: startIdx,\n          end: endIdx,\n          action: action\n        });\n      }\n    }\n  }]);\n\n  return BackgroundCells;\n}(_react2.default.Component);\n\nBackgroundCells.propTypes = {\n  date: _propTypes2.default.instanceOf(Date),\n  cellWrapperComponent: _propTypes3.elementType,\n  container: _propTypes2.default.func,\n  dayPropGetter: _propTypes2.default.func,\n  selectable: _propTypes2.default.oneOf([true, false, \"ignoreEvents\"]),\n  longPressThreshold: _propTypes2.default.number,\n  onSelectSlot: _propTypes2.default.func.isRequired,\n  onSelectEnd: _propTypes2.default.func,\n  onSelectStart: _propTypes2.default.func,\n  range: _propTypes2.default.arrayOf(_propTypes2.default.instanceOf(Date)),\n  rtl: _propTypes2.default.bool,\n  type: _propTypes2.default.string\n};\nexports.default = BackgroundCells;","map":null,"metadata":{},"sourceType":"script"}