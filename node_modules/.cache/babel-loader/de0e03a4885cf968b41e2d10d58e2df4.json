{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Event = undefined;\n\nvar _slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  };\n}();\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nexports.startsBefore = startsBefore;\nexports.positionFromDate = positionFromDate;\n\nvar _accessors = require(\"../accessors\");\n\nvar _dates = require(\"../dates\");\n\nvar _dates2 = _interopRequireDefault(_dates);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction startsBefore(date, min) {\n  return _dates2.default.lt(_dates2.default.merge(min, date), min, \"minutes\");\n}\n\nfunction positionFromDate(date, min, total) {\n  if (startsBefore(date, min)) {\n    return 0;\n  }\n\n  var diff = _dates2.default.diff(min, _dates2.default.merge(min, date), \"minutes\");\n\n  return Math.min(diff, total);\n}\n\nvar Event = exports.Event = function () {\n  function Event(data, props) {\n    _classCallCheck(this, Event);\n\n    var startAccessor = props.startAccessor,\n        endAccessor = props.endAccessor,\n        min = props.min,\n        totalMin = props.totalMin;\n\n    var _normalizeDates = normalizeDates((0, _accessors.accessor)(data, startAccessor), (0, _accessors.accessor)(data, endAccessor), props),\n        _normalizeDates2 = _slicedToArray(_normalizeDates, 2),\n        startDate = _normalizeDates2[0],\n        endDate = _normalizeDates2[1];\n\n    this.startSlot = positionFromDate(startDate, min, totalMin);\n    this.endSlot = positionFromDate(endDate, min, totalMin);\n    this.start = +startDate;\n    this.end = +endDate;\n    this.top = this.startSlot / totalMin * 100;\n    this.height = this.endSlot / totalMin * 100 - this.top;\n    this.data = data;\n  }\n  /**\n   * The event\"s width without any overlap.\n   */\n\n\n  _createClass(Event, [{\n    key: \"_width\",\n    get: function get() {\n      // The container event\"s width is determined by the maximum number of\n      // events in any of its rows.\n      if (this.rows) {\n        var columns = this.rows.reduce(function (max, row) {\n          return Math.max(max, row.leaves.length + 1); // add itself\n        }, 0) + 1; // add the container\n\n        return 100 / columns;\n      }\n\n      var availableWidth = 100 - this.container._width; // The row event\"s width is the space left by the container, divided\n      // among itself and its leaves.\n\n      if (this.leaves) {\n        return availableWidth / (this.leaves.length + 1);\n      } // The leaf event\"s width is determined by its row\"s width\n\n\n      return this.row._width;\n    }\n    /**\n     * The event\"s calculated width, possibly with extra width added for\n     * overlapping effect.\n     */\n\n  }, {\n    key: \"width\",\n    get: function get() {\n      var noOverlap = this._width;\n      var overlap = Math.min(100, this._width * 1.7); // Containers can always grow.\n\n      if (this.rows) {\n        return overlap;\n      } // Rows can grow if they have leaves.\n\n\n      if (this.leaves) {\n        return this.leaves.length > 0 ? overlap : noOverlap;\n      } // Leaves can grow unless they\"re the last item in a row.\n\n\n      var leaves = this.row.leaves;\n      var index = leaves.indexOf(this);\n      return index === leaves.length - 1 ? noOverlap : overlap;\n    }\n  }, {\n    key: \"xOffset\",\n    get: function get() {\n      // Containers have no offset.\n      if (this.rows) {\n        return 0;\n      } // Rows always start where their container ends.\n\n\n      if (this.leaves) {\n        return this.container._width;\n      } // Leaves are spread out evenly on the space left by its row.\n\n\n      var _row = this.row,\n          leaves = _row.leaves,\n          xOffset = _row.xOffset,\n          _width = _row._width;\n      var index = leaves.indexOf(this) + 1;\n      return xOffset + index * _width;\n    }\n  }]);\n\n  return Event;\n}();\n/**\n * Return start and end dates with respect to timeslot positions.\n */\n\n\nfunction normalizeDates(startDate, endDate, _ref) {\n  var min = _ref.min,\n      showMultiDayTimes = _ref.showMultiDayTimes;\n\n  if (!showMultiDayTimes) {\n    return [startDate, endDate];\n  }\n\n  var current = new Date(min); // today at midnight\n\n  var c = new Date(current);\n  var s = new Date(startDate);\n  var e = new Date(endDate); // Use noon to compare dates to avoid DST issues.\n\n  s.setHours(12, 0, 0, 0);\n  e.setHours(12, 0, 0, 0);\n  c.setHours(12, 0, 0, 0); // Current day is at the start, but it spans multiple days,\n  // so we correct the end.\n\n  if (+c === +s && c < e) {\n    return [startDate, _dates2.default.endOf(startDate, \"day\")];\n  } // Current day is in between start and end dates,\n  // so we make it span all day.\n\n\n  if (c > s && c < e) {\n    return [current, _dates2.default.endOf(current, \"day\")];\n  } // Current day is at the end of a multi day event,\n  // so we make it start at midnight, and end normally.\n\n\n  if (c > s && +c === +e) {\n    return [current, endDate];\n  }\n\n  return [startDate, endDate];\n}","map":null,"metadata":{},"sourceType":"script"}